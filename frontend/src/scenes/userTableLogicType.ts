// Generated by kea-typegen on Sat, 04 Mar 2023 06:34:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Event, User } from '../lib/api'
import type { FilterType } from '../components/UserTable'

export interface userTableLogicType extends Logic {
  actionCreators: {
    loadUserEvents: (userId: string) => {
      type: 'load user events (src.scenes.userTableLogic)'
      payload: {
        userId: string
      }
    }
    setFilter: (
      filterType: FilterType,
      whitelistUserIds?: string[]
    ) => {
      type: 'set filter (src.scenes.userTableLogic)'
      payload: {
        filterType: FilterType
        whitelistUserIds: string[] | undefined
      }
    }
  }
  actionKeys: {
    'load user events (src.scenes.userTableLogic)': 'loadUserEvents'
    'set filter (src.scenes.userTableLogic)': 'setFilter'
  }
  actionTypes: {
    loadUserEvents: 'load user events (src.scenes.userTableLogic)'
    setFilter: 'set filter (src.scenes.userTableLogic)'
  }
  actions: {
    loadUserEvents: (userId: string) => void
    setFilter: (filterType: FilterType, whitelistUserIds?: string[]) => void
  }
  asyncActions: {
    loadUserEvents: (userId: string) => Promise<any>
    setFilter: (filterType: FilterType, whitelistUserIds?: string[]) => Promise<any>
  }
  defaults: {
    currentFilter: {
      filterType: FilterType
      whitelistUserIds?: string[]
    }
  }
  events: {}
  key: undefined
  listeners: {}
  path: ['src', 'scenes', 'userTableLogic']
  pathString: 'src.scenes.userTableLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    currentFilter: {
      filterType: FilterType
      whitelistUserIds?: string[]
    }
  }
  reducers: {
    currentFilter: (
      state: {
        filterType: FilterType
        whitelistUserIds?: string[]
      },
      action: any,
      fullState: any
    ) => {
      filterType: FilterType
      whitelistUserIds?: string[]
    }
  }
  selector: (state: any) => {
    currentFilter: {
      filterType: FilterType
      whitelistUserIds?: string[]
    }
  }
  selectors: {
    currentFilter: (
      state: any,
      props?: any
    ) => {
      filterType: FilterType
      whitelistUserIds?: string[]
    }
    users: (state: any, props?: any) => User[]
    userEvents: (state: any, props?: any) => Record<string, Event[]>
    usersForSelectedFilter: (state: any, props?: any) => User[]
  }
  sharedListeners: {}
  values: {
    currentFilter: {
      filterType: FilterType
      whitelistUserIds?: string[]
    }
    users: User[]
    userEvents: Record<string, Event[]>
    usersForSelectedFilter: User[]
  }
  _isKea: true
  _isKeaWithKey: false
  __keaTypeGenInternalSelectorTypes: {
    usersForSelectedFilter: (
      currentFilter: {
        filterType: FilterType
        whitelistUserIds?: string[] | undefined
      },
      users: User[]
    ) => User[]
  }
}

// Generated by kea-typegen on Thu, 02 Mar 2023 21:36:34 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventStats } from '../lib/api'

export interface eventDetailsLogicType extends Logic {
  actionCreators: {
    setStats: (stats: EventStats[]) => {
      type: 'set stats (src.components.EventDetails)'
      payload: {
        stats: EventStats[]
      }
    }
    loadStats: () => {
      type: 'load stats (src.components.EventDetails)'
      payload: {}
    }
    setStatsSuccess: (
      stats: EventStats[],
      payload?: {
        stats: EventStats[]
      }
    ) => {
      type: 'set stats success (src.components.EventDetails)'
      payload: {
        stats: EventStats[]
        payload?: {
          stats: EventStats[]
        }
      }
    }
    setStatsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'set stats failure (src.components.EventDetails)'
      payload: {
        error: string
        errorObject?: any
      }
    }
  }
  actionKeys: {
    'set stats (src.components.EventDetails)': 'setStats'
    'load stats (src.components.EventDetails)': 'loadStats'
    'set stats success (src.components.EventDetails)': 'setStatsSuccess'
    'set stats failure (src.components.EventDetails)': 'setStatsFailure'
  }
  actionTypes: {
    setStats: 'set stats (src.components.EventDetails)'
    loadStats: 'load stats (src.components.EventDetails)'
    setStatsSuccess: 'set stats success (src.components.EventDetails)'
    setStatsFailure: 'set stats failure (src.components.EventDetails)'
  }
  actions: {
    setStats: (stats: EventStats[]) => void
    loadStats: () => void
    setStatsSuccess: (
      stats: EventStats[],
      payload?: {
        stats: EventStats[]
      }
    ) => void
    setStatsFailure: (error: string, errorObject?: any) => void
  }
  asyncActions: {
    setStats: (stats: EventStats[]) => Promise<any>
    loadStats: () => Promise<any>
    setStatsSuccess: (
      stats: EventStats[],
      payload?: {
        stats: EventStats[]
      }
    ) => Promise<any>
    setStatsFailure: (error: string, errorObject?: any) => Promise<any>
  }
  defaults: {
    stats: EventStats[]
    statsLoading: boolean
  }
  events: {
    afterMount: () => void
  }
  key: undefined
  listeners: {
    loadStats: ((
      action: {
        type: 'load stats (src.components.EventDetails)'
        payload: {}
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['src', 'components', 'EventDetails']
  pathString: 'src.components.EventDetails'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    stats: EventStats[]
    statsLoading: boolean
  }
  reducers: {
    stats: (state: EventStats[], action: any, fullState: any) => EventStats[]
    statsLoading: (state: boolean, action: any, fullState: any) => boolean
  }
  selector: (state: any) => {
    stats: EventStats[]
    statsLoading: boolean
  }
  selectors: {
    stats: (state: any, props?: any) => EventStats[]
    statsLoading: (state: any, props?: any) => boolean
  }
  sharedListeners: {}
  values: {
    stats: EventStats[]
    statsLoading: boolean
  }
  _isKea: true
  _isKeaWithKey: false
}

// Generated by kea-typegen on Sat, 04 Mar 2023 15:56:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FlowDb, Step } from './eventFunnelLogic'

export interface eventFunnelLogicType extends Logic {
  actionCreators: {
    setResults: (
      i: number,
      step: Step
    ) => {
      type: 'set results (src.scenes.eventFunnelLogic)'
      payload: {
        i: number
        step: Step
      }
    }
    filterForUserIds: (
      filterDescription: string,
      whitelistUserIds: string[]
    ) => {
      type: 'filter for user ids (src.scenes.eventFunnelLogic)'
      payload: {
        filterDescription: string
        whitelistUserIds: string[]
      }
    }
    setPath: (path: string[]) => {
      type: 'set path (src.scenes.eventFunnelLogic)'
      payload: string[]
    }
    setPathSuccess: (
      path: string[],
      payload?: string[]
    ) => {
      type: 'set path success (src.scenes.eventFunnelLogic)'
      payload: {
        path: string[]
        payload?: string[]
      }
    }
    setPathFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'set path failure (src.scenes.eventFunnelLogic)'
      payload: {
        error: string
        errorObject?: any
      }
    }
    setResultsSuccess: (
      results: Step[],
      payload?: {
        i: number
        step: Step
      }
    ) => {
      type: 'set results success (src.scenes.eventFunnelLogic)'
      payload: {
        results: Step[]
        payload?: {
          i: number
          step: Step
        }
      }
    }
    setResultsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'set results failure (src.scenes.eventFunnelLogic)'
      payload: {
        error: string
        errorObject?: any
      }
    }
    filterForUserIdsSuccess: (
      whitelistUserIds: string[],
      payload?: {
        filterDescription: string
        whitelistUserIds: string[]
      }
    ) => {
      type: 'filter for user ids success (src.scenes.eventFunnelLogic)'
      payload: {
        whitelistUserIds: string[]
        payload?: {
          filterDescription: string
          whitelistUserIds: string[]
        }
      }
    }
    filterForUserIdsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'filter for user ids failure (src.scenes.eventFunnelLogic)'
      payload: {
        error: string
        errorObject?: any
      }
    }
  }
  actionKeys: {
    'set results (src.scenes.eventFunnelLogic)': 'setResults'
    'filter for user ids (src.scenes.eventFunnelLogic)': 'filterForUserIds'
    'set path (src.scenes.eventFunnelLogic)': 'setPath'
    'set path success (src.scenes.eventFunnelLogic)': 'setPathSuccess'
    'set path failure (src.scenes.eventFunnelLogic)': 'setPathFailure'
    'set results success (src.scenes.eventFunnelLogic)': 'setResultsSuccess'
    'set results failure (src.scenes.eventFunnelLogic)': 'setResultsFailure'
    'filter for user ids success (src.scenes.eventFunnelLogic)': 'filterForUserIdsSuccess'
    'filter for user ids failure (src.scenes.eventFunnelLogic)': 'filterForUserIdsFailure'
  }
  actionTypes: {
    setResults: 'set results (src.scenes.eventFunnelLogic)'
    filterForUserIds: 'filter for user ids (src.scenes.eventFunnelLogic)'
    setPath: 'set path (src.scenes.eventFunnelLogic)'
    setPathSuccess: 'set path success (src.scenes.eventFunnelLogic)'
    setPathFailure: 'set path failure (src.scenes.eventFunnelLogic)'
    setResultsSuccess: 'set results success (src.scenes.eventFunnelLogic)'
    setResultsFailure: 'set results failure (src.scenes.eventFunnelLogic)'
    filterForUserIdsSuccess: 'filter for user ids success (src.scenes.eventFunnelLogic)'
    filterForUserIdsFailure: 'filter for user ids failure (src.scenes.eventFunnelLogic)'
  }
  actions: {
    setResults: (i: number, step: Step) => void
    filterForUserIds: (filterDescription: string, whitelistUserIds: string[]) => void
    setPath: (path: string[]) => void
    setPathSuccess: (path: string[], payload?: string[]) => void
    setPathFailure: (error: string, errorObject?: any) => void
    setResultsSuccess: (
      results: Step[],
      payload?: {
        i: number
        step: Step
      }
    ) => void
    setResultsFailure: (error: string, errorObject?: any) => void
    filterForUserIdsSuccess: (
      whitelistUserIds: string[],
      payload?: {
        filterDescription: string
        whitelistUserIds: string[]
      }
    ) => void
    filterForUserIdsFailure: (error: string, errorObject?: any) => void
  }
  asyncActions: {
    setResults: (i: number, step: Step) => Promise<any>
    filterForUserIds: (filterDescription: string, whitelistUserIds: string[]) => Promise<any>
    setPath: (path: string[]) => Promise<any>
    setPathSuccess: (path: string[], payload?: string[]) => Promise<any>
    setPathFailure: (error: string, errorObject?: any) => Promise<any>
    setResultsSuccess: (
      results: Step[],
      payload?: {
        i: number
        step: Step
      }
    ) => Promise<any>
    setResultsFailure: (error: string, errorObject?: any) => Promise<any>
    filterForUserIdsSuccess: (
      whitelistUserIds: string[],
      payload?: {
        filterDescription: string
        whitelistUserIds: string[]
      }
    ) => Promise<any>
    filterForUserIdsFailure: (error: string, errorObject?: any) => Promise<any>
  }
  defaults: {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
    whitelistUserIds: string[]
    whitelistUserIdsLoading: boolean
    filterDescription: string
  }
  events: {
    afterMount: () => void
  }
  key: undefined
  listeners: {
    setPath: ((
      action: {
        type: 'set path (src.scenes.eventFunnelLogic)'
        payload: string[]
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['src', 'scenes', 'eventFunnelLogic']
  pathString: 'src.scenes.eventFunnelLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
    whitelistUserIds: string[]
    whitelistUserIdsLoading: boolean
    filterDescription: string
  }
  reducers: {
    path: (state: string[], action: any, fullState: any) => string[]
    pathLoading: (state: boolean, action: any, fullState: any) => boolean
    results: (state: FlowDb, action: any, fullState: any) => FlowDb
    resultsLoading: (state: boolean, action: any, fullState: any) => boolean
    whitelistUserIds: (state: string[], action: any, fullState: any) => string[]
    whitelistUserIdsLoading: (state: boolean, action: any, fullState: any) => boolean
    filterDescription: (state: string, action: any, fullState: any) => string
  }
  selector: (state: any) => {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
    whitelistUserIds: string[]
    whitelistUserIdsLoading: boolean
    filterDescription: string
  }
  selectors: {
    path: (state: any, props?: any) => string[]
    pathLoading: (state: any, props?: any) => boolean
    results: (state: any, props?: any) => FlowDb
    resultsLoading: (state: any, props?: any) => boolean
    whitelistUserIds: (state: any, props?: any) => string[]
    whitelistUserIdsLoading: (state: any, props?: any) => boolean
    filterDescription: (state: any, props?: any) => string
  }
  sharedListeners: {}
  values: {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
    whitelistUserIds: string[]
    whitelistUserIdsLoading: boolean
    filterDescription: string
  }
  _isKea: true
  _isKeaWithKey: false
}

// Generated by kea-typegen on Sat, 04 Mar 2023 05:34:16 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Event, User } from '../lib/api'

export interface userLogicType extends Logic {
  actionCreators: {
    loadUsers: () => {
      type: 'load users (src.scenes.userLogic)'
      payload: {}
    }
    loadUserEvents: (userId: string) => {
      type: 'load user events (src.scenes.userLogic)'
      payload: {
        userId: string
      }
    }
    setUsers: (users: User[]) => {
      type: 'set users (src.scenes.userLogic)'
      payload: {
        users: User[]
      }
    }
    setUserEvents: (
      userId: string,
      events: Event[]
    ) => {
      type: 'set user events (src.scenes.userLogic)'
      payload: {
        userId: string
        events: Event[]
      }
    }
    setUsersSuccess: (
      users: User[],
      payload?: {
        users: User[]
      }
    ) => {
      type: 'set users success (src.scenes.userLogic)'
      payload: {
        users: User[]
        payload?: {
          users: User[]
        }
      }
    }
    setUsersFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'set users failure (src.scenes.userLogic)'
      payload: {
        error: string
        errorObject?: any
      }
    }
    setUserEventsSuccess: (
      userEvents: { [x: string]: Event[] },
      payload?: {
        userId: string
        events: Event[]
      }
    ) => {
      type: 'set user events success (src.scenes.userLogic)'
      payload: {
        userEvents: { [x: string]: Event[] }
        payload?: {
          userId: string
          events: Event[]
        }
      }
    }
    setUserEventsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'set user events failure (src.scenes.userLogic)'
      payload: {
        error: string
        errorObject?: any
      }
    }
  }
  actionKeys: {
    'load users (src.scenes.userLogic)': 'loadUsers'
    'load user events (src.scenes.userLogic)': 'loadUserEvents'
    'set users (src.scenes.userLogic)': 'setUsers'
    'set user events (src.scenes.userLogic)': 'setUserEvents'
    'set users success (src.scenes.userLogic)': 'setUsersSuccess'
    'set users failure (src.scenes.userLogic)': 'setUsersFailure'
    'set user events success (src.scenes.userLogic)': 'setUserEventsSuccess'
    'set user events failure (src.scenes.userLogic)': 'setUserEventsFailure'
  }
  actionTypes: {
    loadUsers: 'load users (src.scenes.userLogic)'
    loadUserEvents: 'load user events (src.scenes.userLogic)'
    setUsers: 'set users (src.scenes.userLogic)'
    setUserEvents: 'set user events (src.scenes.userLogic)'
    setUsersSuccess: 'set users success (src.scenes.userLogic)'
    setUsersFailure: 'set users failure (src.scenes.userLogic)'
    setUserEventsSuccess: 'set user events success (src.scenes.userLogic)'
    setUserEventsFailure: 'set user events failure (src.scenes.userLogic)'
  }
  actions: {
    loadUsers: () => void
    loadUserEvents: (userId: string) => void
    setUsers: (users: User[]) => void
    setUserEvents: (userId: string, events: Event[]) => void
    setUsersSuccess: (
      users: User[],
      payload?: {
        users: User[]
      }
    ) => void
    setUsersFailure: (error: string, errorObject?: any) => void
    setUserEventsSuccess: (
      userEvents: { [x: string]: Event[] },
      payload?: {
        userId: string
        events: Event[]
      }
    ) => void
    setUserEventsFailure: (error: string, errorObject?: any) => void
  }
  asyncActions: {
    loadUsers: () => Promise<any>
    loadUserEvents: (userId: string) => Promise<any>
    setUsers: (users: User[]) => Promise<any>
    setUserEvents: (userId: string, events: Event[]) => Promise<any>
    setUsersSuccess: (
      users: User[],
      payload?: {
        users: User[]
      }
    ) => Promise<any>
    setUsersFailure: (error: string, errorObject?: any) => Promise<any>
    setUserEventsSuccess: (
      userEvents: { [x: string]: Event[] },
      payload?: {
        userId: string
        events: Event[]
      }
    ) => Promise<any>
    setUserEventsFailure: (error: string, errorObject?: any) => Promise<any>
  }
  defaults: {
    users: User[]
    usersLoading: boolean
    userEvents: Record<string, Event[]>
    userEventsLoading: boolean
  }
  events: {
    afterMount: () => void
  }
  key: undefined
  listeners: {
    loadUsers: ((
      action: {
        type: 'load users (src.scenes.userLogic)'
        payload: {}
      },
      previousState: any
    ) => void | Promise<void>)[]
    loadUserEvents: ((
      action: {
        type: 'load user events (src.scenes.userLogic)'
        payload: {
          userId: string
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['src', 'scenes', 'userLogic']
  pathString: 'src.scenes.userLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    users: User[]
    usersLoading: boolean
    userEvents: Record<string, Event[]>
    userEventsLoading: boolean
  }
  reducers: {
    users: (state: User[], action: any, fullState: any) => User[]
    usersLoading: (state: boolean, action: any, fullState: any) => boolean
    userEvents: (state: Record<string, Event[]>, action: any, fullState: any) => Record<string, Event[]>
    userEventsLoading: (state: boolean, action: any, fullState: any) => boolean
  }
  selector: (state: any) => {
    users: User[]
    usersLoading: boolean
    userEvents: Record<string, Event[]>
    userEventsLoading: boolean
  }
  selectors: {
    users: (state: any, props?: any) => User[]
    usersLoading: (state: any, props?: any) => boolean
    userEvents: (state: any, props?: any) => Record<string, Event[]>
    userEventsLoading: (state: any, props?: any) => boolean
  }
  sharedListeners: {}
  values: {
    users: User[]
    usersLoading: boolean
    userEvents: Record<string, Event[]>
    userEventsLoading: boolean
  }
  _isKea: true
  _isKeaWithKey: false
}

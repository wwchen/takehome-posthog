// Generated by kea-typegen on Thu, 02 Mar 2023 02:43:39 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface logicType extends Logic {
  actionCreators: {
    setUsername: (username: string) => {
      type: 'set username (src.components.Github)'
      payload: {
        username: string
      }
    }
    setRepositories: (repositories: string[]) => {
      type: 'set repositories (src.components.Github)'
      payload: {
        repositories: string[]
      }
    }
    setFetchError: (error: any) => {
      type: 'set fetch error (src.components.Github)'
      payload: {
        error: any
      }
    }
  }
  actionKeys: {
    'set username (src.components.Github)': 'setUsername'
    'set repositories (src.components.Github)': 'setRepositories'
    'set fetch error (src.components.Github)': 'setFetchError'
  }
  actionTypes: {
    setUsername: 'set username (src.components.Github)'
    setRepositories: 'set repositories (src.components.Github)'
    setFetchError: 'set fetch error (src.components.Github)'
  }
  actions: {
    setUsername: (username: string) => void
    setRepositories: (repositories: string[]) => void
    setFetchError: (error: any) => void
  }
  asyncActions: {
    setUsername: (username: string) => Promise<any>
    setRepositories: (repositories: string[]) => Promise<any>
    setFetchError: (error: any) => Promise<any>
  }
  defaults: {
    username: string
    repositories: any[]
    isLoading: boolean
    error: null
  }
  events: {
    afterMount: () => void
  }
  key: undefined
  listeners: {
    setUsername: ((
      action: {
        type: 'set username (src.components.Github)'
        payload: {
          username: string
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['src', 'components', 'Github']
  pathString: 'src.components.Github'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    username: string
    repositories: any[]
    isLoading: boolean
    error: null
  }
  reducers: {
    username: (state: string, action: any, fullState: any) => string
    repositories: (state: any[], action: any, fullState: any) => any[]
    isLoading: (state: boolean, action: any, fullState: any) => boolean
    error: (state: null, action: any, fullState: any) => null
  }
  selector: (state: any) => {
    username: string
    repositories: any[]
    isLoading: boolean
    error: null
  }
  selectors: {
    username: (state: any, props?: any) => string
    repositories: (state: any, props?: any) => any[]
    isLoading: (state: any, props?: any) => boolean
    error: (state: any, props?: any) => null
    sortedRepositories: (state: any, props?: any) => any[]
  }
  sharedListeners: {}
  values: {
    username: string
    repositories: any[]
    isLoading: boolean
    error: null
    sortedRepositories: any[]
  }
  _isKea: true
  _isKeaWithKey: false
  __keaTypeGenInternalSelectorTypes: {
    sortedRepositories: (repositories: any[]) => any[]
  }
}

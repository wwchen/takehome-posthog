// Generated by kea-typegen on Thu, 02 Mar 2023 19:27:41 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FlowDb, Step } from './FunnelExploration'

export interface explorationLogicType extends Logic {
  actionCreators: {
    setResults: (
      i: number,
      step: Step
    ) => {
      type: 'set results (src.components.FunnelExploration)'
      payload: {
        i: number
        step: Step
      }
    }
    setPath: (path: string[]) => {
      type: 'set path (src.components.FunnelExploration)'
      payload: string[]
    }
    setPathSuccess: (
      path: string[],
      payload?: string[]
    ) => {
      type: 'set path success (src.components.FunnelExploration)'
      payload: {
        path: string[]
        payload?: string[]
      }
    }
    setPathFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'set path failure (src.components.FunnelExploration)'
      payload: {
        error: string
        errorObject?: any
      }
    }
    setResultsSuccess: (
      results: Step[],
      payload?: {
        i: number
        step: Step
      }
    ) => {
      type: 'set results success (src.components.FunnelExploration)'
      payload: {
        results: Step[]
        payload?: {
          i: number
          step: Step
        }
      }
    }
    setResultsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'set results failure (src.components.FunnelExploration)'
      payload: {
        error: string
        errorObject?: any
      }
    }
  }
  actionKeys: {
    'set results (src.components.FunnelExploration)': 'setResults'
    'set path (src.components.FunnelExploration)': 'setPath'
    'set path success (src.components.FunnelExploration)': 'setPathSuccess'
    'set path failure (src.components.FunnelExploration)': 'setPathFailure'
    'set results success (src.components.FunnelExploration)': 'setResultsSuccess'
    'set results failure (src.components.FunnelExploration)': 'setResultsFailure'
  }
  actionTypes: {
    setResults: 'set results (src.components.FunnelExploration)'
    setPath: 'set path (src.components.FunnelExploration)'
    setPathSuccess: 'set path success (src.components.FunnelExploration)'
    setPathFailure: 'set path failure (src.components.FunnelExploration)'
    setResultsSuccess: 'set results success (src.components.FunnelExploration)'
    setResultsFailure: 'set results failure (src.components.FunnelExploration)'
  }
  actions: {
    setResults: (i: number, step: Step) => void
    setPath: (path: string[]) => void
    setPathSuccess: (path: string[], payload?: string[]) => void
    setPathFailure: (error: string, errorObject?: any) => void
    setResultsSuccess: (
      results: Step[],
      payload?: {
        i: number
        step: Step
      }
    ) => void
    setResultsFailure: (error: string, errorObject?: any) => void
  }
  asyncActions: {
    setResults: (i: number, step: Step) => Promise<any>
    setPath: (path: string[]) => Promise<any>
    setPathSuccess: (path: string[], payload?: string[]) => Promise<any>
    setPathFailure: (error: string, errorObject?: any) => Promise<any>
    setResultsSuccess: (
      results: Step[],
      payload?: {
        i: number
        step: Step
      }
    ) => Promise<any>
    setResultsFailure: (error: string, errorObject?: any) => Promise<any>
  }
  defaults: {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
  }
  events: {
    afterMount: () => void
  }
  key: undefined
  listeners: {
    setPath: ((
      action: {
        type: 'set path (src.components.FunnelExploration)'
        payload: string[]
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['src', 'components', 'FunnelExploration']
  pathString: 'src.components.FunnelExploration'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
  }
  reducers: {
    path: (state: string[], action: any, fullState: any) => string[]
    pathLoading: (state: boolean, action: any, fullState: any) => boolean
    results: (state: FlowDb, action: any, fullState: any) => FlowDb
    resultsLoading: (state: boolean, action: any, fullState: any) => boolean
  }
  selector: (state: any) => {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
  }
  selectors: {
    path: (state: any, props?: any) => string[]
    pathLoading: (state: any, props?: any) => boolean
    results: (state: any, props?: any) => FlowDb
    resultsLoading: (state: any, props?: any) => boolean
  }
  sharedListeners: {}
  values: {
    path: string[]
    pathLoading: boolean
    results: FlowDb
    resultsLoading: boolean
  }
  _isKea: true
  _isKeaWithKey: false
}
